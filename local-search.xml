<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Javascript高级语法</title>
    <link href="/2021/02/09/javascript%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/02/09/javascript%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><ul><li>每一个函数都有一个默认的prototype原型，prototype本质是一个对象</li><li>在protoType定义的属性和方法会被该函数的实例对象继承</li></ul><h1 id="对象的原型"><a href="#对象的原型" class="headerlink" title="对象的原型"></a>对象的原型</h1><ul><li>每一个对象默认有一个__proto__对象原型</li><li>__proto__指向该对象构造函数的原型对象prototype</li></ul><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><ul><li>构造函数里的Object.prototype.constructor属性指向该构造函数</li></ul><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><ul><li>每一个对象都有一个对象原型__proto__指向该对象构造函数的原型对象prototype，该对象原型也有一个原型，层层指向最后指向null</li></ul><h1 id="高级数组方法"><a href="#高级数组方法" class="headerlink" title="高级数组方法"></a>高级数组方法</h1><ol><li>快速遍历数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>根据条件筛选数组，返回筛选后的新数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>判断是否存在一个满足条件的元素，是返回true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>判断是否所有元素满足条件，是返回true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ul><li>以上方法参数为一个回调函数，回调函数的参数为数组的项、索引和数组本身。filter、some、every需要回调函数返回一个判断条件，方法根据条件筛选</li></ul><h1 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h1><ul><li>获取对象所有属性名<ul><li>Object.keys(obj)</li></ul></li><li>定义一个新属性<ul><li>参数一，要增加属性的对象</li><li>参数二，增加的属性名</li><li>参数三，描述符对象<ul><li>value: 属性值 </li><li>writable: 是否可以修改</li><li>enumerable: 是否可以枚举（遍历到）</li><li>configurable: 是否可以删除或再次修改特性</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(对象，属性名，描述符对象)<br></code></pre></td></tr></table></figure><h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><ul><li><p>全局作用域的this指向window</p></li><li><p>局部作用域this指向函数调用者</p></li><li><p>改变this指向的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.call(<span class="hljs-built_in">this</span>指向，参数一，参数二……)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.apply(<span class="hljs-built_in">this</span>指向，参数数组)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.bind(<span class="hljs-built_in">this</span>指向，参数一，参数二……)<br></code></pre></td></tr></table></figure><h1 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h1></li><li><p>属性的继承  Father.call(this, name, age)</p><ul><li>在子构造函数内使用，改变父类构造函数的this指向子构造函数的实例</li></ul></li><li><p>方法的继承 Son.prototype =  new Father()</p><ul><li>子构造函数的原型对象指向父构造函数的实例对象</li></ul></li></ul><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><ul><li>限制javascript的一些松散行为</li><li>作用<ul><li>消除了 js 代码的不合理和不严谨地方，减少怪异行为</li><li>消除了代码的不安全地方，保证代码安全运行</li><li>提高编译器的效率，增加运行的速度</li><li>禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等</li></ul></li><li>使用<ul><li>在script里第一行添加”use strict”,为整个JS添加严格模式</li><li>在函数体内第一行添加”use strict”,为当前函数添加严格模式</li></ul></li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>　函数内定义的变量被其他作用域所访问，即内部函数调用外部函数的变量</li><li>　作用<ul><li>延伸了变量的使用范围</li><li>实现了数据的封装</li><li>实现了数据的缓存（函数的柯里化）</li></ul></li><li>　缺点<ul><li>　容易造成内存泄露</li><li>　加大内存消耗</li></ul></li></ul><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li><p>　函数内部调用其自身</p></li><li><p>　应用</p><ul><li>　求阶乘</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<span class="hljs-keyword">return</span> n * fn(n ‐ <span class="hljs-number">1</span>); &#125;<br></code></pre></td></tr></table></figure><ul><li>求斐波那契数列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">2</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<span class="hljs-keyword">return</span> fb(n ‐ <span class="hljs-number">1</span>) + fb(n ‐ <span class="hljs-number">2</span>); &#125;<br></code></pre></td></tr></table></figure><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><ul><li><p>　浅拷贝</p><ul><li><p>　对于复杂数据类型，复制其地址</p></li><li><p>　方法</p></li></ul></li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">｛...<span class="hljs-keyword">object</span>｝<br></code></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>     obj2[key] = obj[key];<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>深拷贝</p><ul><li><p>　另外开辟空间复制数据，两者相互独立</p></li><li><p>方法</p></li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(<span class="hljs-keyword">object</span>))<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>, <span class="hljs-params">obj2</span>)</span> &#123;<br>      <span class="hljs-keyword">for</span> (var key <span class="hljs-keyword">in</span> obj1) &#123;<br>        <span class="hljs-comment">//key为数组</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">key</span>)</span>) &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = <span class="hljs-literal">[]</span>;<br>          deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>[<span class="hljs-params">key</span>], <span class="hljs-params">obj2</span>[<span class="hljs-params">key</span>])</span><br><br>          <span class="hljs-comment">//key为对象</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj1<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> instanceof Object) &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = &#123;&#125;;<br>          deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>[<span class="hljs-params">key</span>], <span class="hljs-params">obj2</span>[<span class="hljs-params">key</span>])</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = obj1<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li><p>作用</p><ul><li>用于检索字符串的一种语法</li></ul></li><li><p>使用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/123/</span><br></code></pre></td></tr></table></figure><ul><li>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">reg.test(string)<br></code></pre></td></tr></table></figure><ul><li><p>边界符</p><ul><li>/^123/ 以123开始</li><li>/123$/ 以123结尾</li><li>/^123$/ 精确匹配，字符个数和类型必须完全一致</li></ul></li><li><p>字符集合</p><ul><li>[0-9a-zA-Z] 匹配单个字符</li></ul></li><li><p>反向字符集合</p><ul><li>[^0-9a-zA-Z] 匹配除0-9a-zA-Z外的字符</li></ul></li><li><p>量字符</p><ul><li><table><thead><tr><th>字符</th><th>出现次数</th></tr></thead><tbody><tr><td>*</td><td>0到多次</td></tr><tr><td>+</td><td>1到多次</td></tr><tr><td>?</td><td>0或1次</td></tr><tr><td>.</td><td>除换行外的字符</td></tr><tr><td>{n}</td><td>n次</td></tr><tr><td>{n,}</td><td>n到多次</td></tr><tr><td>{m,n}</td><td>m到n次</td></tr></tbody></table></li></ul></li><li><p>预定义</p><ul><li><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>字母、数字、下划线</td></tr><tr><td>\W</td><td>非字母、数字、下划线</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr></tbody></table></li></ul></li><li><p>或者</p><ul><li>/123|456/  匹配123或者456</li></ul></li><li><p>修饰符</p><ul><li><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>/123/g</td><td>全局匹配</td></tr><tr><td>/123/i</td><td>不区分大小写</td></tr><tr><td>/123/gi</td><td>全局匹配且不区分大小写</td></tr></tbody></table></li></ul></li><li><p>字符串匹配</p><ul><li>替换全局匹配的字符串</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.replace(<span class="hljs-regexp">/123/g</span>,string)<br></code></pre></td></tr></table></figure><ul><li>返回匹配的字符串数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.match(<span class="hljs-regexp">/123/g</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript基础语法</title>
    <link href="/2021/02/09/Javascript%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/09/Javascript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1-Number"><a href="#1-Number" class="headerlink" title="1. Number"></a>1. Number</h3><ul><li><p>八进制：数字前加<code>0</code></p></li><li><p>十六进制：数字前加 <code>0x</code></p></li><li><p>最大值：<code>Number.MAX_VALUE</code></p></li><li><p>最小值：<code>Number.MIN_VALUE</code></p></li><li><p>无穷大：<code>Infinity</code></p></li><li><p>非数字：<code>NaN</code></p></li><li><p><code>isNaN</code>：判断是否为非数字类型，若为数字返回false</p></li></ul><h3 id="2-String"><a href="#2-String" class="headerlink" title="2. String"></a>2. String</h3><ul><li><p>字符串需要包括在单引号后者双引号之中</p></li><li><p>转义字符：\n、\t、\b等</p></li><li><p>计算字符串长度，使用属性：<code>legnth</code></p></li><li><p>字符串连接使用<code>+</code></p></li></ul><h3 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h3><ul><li>true和数字运算时结果为1，false和数字运算结果为0</li></ul><h3 id="4-Undefined"><a href="#4-Undefined" class="headerlink" title="4.Undefined"></a>4.Undefined</h3><ul><li>未定义数据类型与数字运算结果为NaN</li></ul><h3 id="5-Null"><a href="#5-Null" class="headerlink" title="5. Null"></a>5. Null</h3><ul><li>空类型与数字运算为0</li></ul><h2 id="二、typeof"><a href="#二、typeof" class="headerlink" title="二、typeof"></a>二、typeof</h2><ul><li>获取数据的类型</li></ul><h2 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h2><h3 id="1-转化为字符串类型"><a href="#1-转化为字符串类型" class="headerlink" title="1. 转化为字符串类型"></a>1. 转化为字符串类型</h3><ul><li><p>toString()</p></li><li><p>String()</p></li><li><p>使用“+”拼接</p></li></ul><h3 id="2-转化为数字类型"><a href="#2-转化为数字类型" class="headerlink" title="2. 转化为数字类型"></a>2. 转化为数字类型</h3><ul><li><p>parseInt()，会舍去小数部分，可以去除数值后面的单位</p></li><li><p>parseFloat()，可以去除数值后面的单位</p></li><li><p>Number()</p></li><li><p>进行减乘除运算</p></li></ul><h3 id="3-转化为布尔类型"><a href="#3-转化为布尔类型" class="headerlink" title="3. 转化为布尔类型"></a>3. 转化为布尔类型</h3><ul><li>Boolean()，其中” “、0、null、undefined、NaN转化为false，其余转化为true</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h2><ul><li>加（+）、减（-）、乘（*）、除（/）、取余（%）</li></ul><h2 id="二、自运算"><a href="#二、自运算" class="headerlink" title="二、自运算"></a>二、自运算</h2><ul><li>前置自增（自减），先运算，后返回值。</li><li>后置自增（自减），先返回值，后运算。</li></ul><h2 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h2><ul><li>大于（&gt;）、小于（&lt;）、大于等于（&gt;=）、小于等于（&lt;=）、等于（==），不等于（!=）、全等于（===），不全等（!==）</li><li>大于（&gt;）、小于（&lt;）、大于等于（&gt;=）、小于等于（&lt;=）、等于（==），<br>存在隐式转换、全等（===），必须是值和数据类型完全相同。</li></ul><h2 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h2><ul><li>逻辑与（&amp;&amp;）<ul><li>全部为true，则结果为true</li></ul></li><li>逻辑或（||）<ul><li>只要有一个结果为true，结果为true</li></ul></li><li>逻辑非（!）<ul><li>取反，true取反为flase；false取反为true</li></ul></li><li>逻辑中断<ul><li>多个表达式运算时，当获取到确定结果时 ，返回结果，后续代码将不再运行。</li></ul></li></ul><h2 id="五、赋值运算符"><a href="#五、赋值运算符" class="headerlink" title="五、赋值运算符"></a>五、赋值运算符</h2><ul><li>赋值（=）、加等于（+=）、减等于（-=）、乘等于（*=）、除等于（/=）、取余等于（%=）</li></ul><h2 id="六、运算符优先级"><a href="#六、运算符优先级" class="headerlink" title="六、运算符优先级"></a>六、运算符优先级</h2><ol><li>括号 （）</li><li>单元运算符（++、–、！）</li><li>算数运算符（*、/、%、+、-，先乘除后加减）</li><li>比较运算符（&gt;=、&lt;=、&gt;、&lt;、==、===、!=、!==）</li><li>逻辑运算符（&amp;&amp;、||，先&amp;&amp;后||）</li><li>赋值运算符（=）</li><li>逗号运算符 （，）</li></ol><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="一、顺序"><a href="#一、顺序" class="headerlink" title="一、顺序"></a>一、顺序</h2><ul><li>程序依据顺序执行</li></ul><h2 id="二、分支"><a href="#二、分支" class="headerlink" title="二、分支"></a>二、分支</h2><h3 id="1-if（条件表达式）-…-else-…"><a href="#1-if（条件表达式）-…-else-…" class="headerlink" title="1. if（条件表达式）{…}-else{…}"></a>1. if（条件表达式）{…}-else{…}</h3><ul><li>条件表达式为true执行if里面代码块，否则执行else里面代码块</li></ul><h3 id="2-三元表达式"><a href="#2-三元表达式" class="headerlink" title="2.三元表达式"></a>2.三元表达式</h3><ul><li>条件表达式？表达式一：表达式二；条件表达式结果为true执行表达式一，否则执行表达式二</li></ul><h3 id="3-switch"><a href="#3-switch" class="headerlink" title="3. switch"></a>3. switch</h3><ul><li>case，匹配switch的条件表达式</li><li>break，退出switch</li><li>default，默认选项，若没有匹配到任何case，执行此语句</li></ul><h2 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h2><h3 id="1-for（var-i-0；i-lt-number；i-）-…"><a href="#1-for（var-i-0；i-lt-number；i-）-…" class="headerlink" title="1. for（var i=0；i&lt;number；i++）{…}"></a>1. for（var i=0；i&lt;number；i++）{…}</h3><ul><li>最常用，经常使用嵌套循环</li></ul><h3 id="2-while-表达式-…"><a href="#2-while-表达式-…" class="headerlink" title="2.while(表达式){…}"></a>2.while(表达式){…}</h3><ul><li>先判断再执行循环体</li></ul><h3 id="3、do-…-while-表达式"><a href="#3、do-…-while-表达式" class="headerlink" title="3、do{…}while(表达式)"></a>3、do{…}while(表达式)</h3><ul><li>先执行循环体再判断</li></ul><h3 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h3><ul><li>continue，跳出当前循环，继续执行下一次循环</li><li>break，退出整个循环</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>数组可以存储任意类型的数据</li></ul><h2 id="二、创建数组"><a href="#二、创建数组" class="headerlink" title="二、创建数组"></a>二、创建数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br></code></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=[];<br></code></pre></td></tr></table></figure><h2 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h2><ul><li>length，获取数组长度</li></ul><h3 id="四、新增数据"><a href="#四、新增数据" class="headerlink" title="四、新增数据"></a>四、新增数据</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr[arr.length]=<span class="hljs-string">&quot;new data&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="五、应用"><a href="#五、应用" class="headerlink" title="五、应用"></a>五、应用</h3><ol><li>遍历数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>   <span class="hljs-built_in">console</span>.log(arr[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>求最大值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>     &#125; <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>冒泡排序</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>          <span class="hljs-comment">//内层循环循环次数</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>              <span class="hljs-comment">//交换数据</span><br>              <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                  <span class="hljs-keyword">var</span> temp = arr[j];<br>                  arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                  arr[j + <span class="hljs-number">1</span>] = temp;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="一、概述-1"><a href="#一、概述-1" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>一段可以重复使用的代码块</li></ul><h2 id="二、函数声明"><a href="#二、函数声明" class="headerlink" title="二、函数声明"></a>二、函数声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>)</span>&#123;&#125;;  <span class="hljs-comment">//存在函数提升</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;  <span class="hljs-comment">//不存在函数提升</span><br></code></pre></td></tr></table></figure><h2 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数"></a>三、参数</h2><ul><li>形参<ul><li>形式上的参数，函数声明时内部使用</li></ul></li><li>实参<ul><li>实际参数，函数调用时赋值给形参带入函数体使用</li></ul></li><li>形参多于实参<ul><li>多余的形参值为undefined，运算结果为NaN</li></ul></li><li>实参多于形参<ul><li>按照实际的形参个数进行执行</li></ul></li><li>默认参数<ul><li>可以直接给形参默认值，当输入实参时覆盖默认值</li></ul></li><li>无法确定参数个数<ul><li>使用arguments接收传递来的实参，arguments是一个伪数组，具有length属性，可以按照索引取值，可以遍历，但是不具备数组的一些方法</li></ul></li></ul><h2 id="四、返回值"><a href="#四、返回值" class="headerlink" title="四、返回值"></a>四、返回值</h2><ul><li>return，函数只有一个返回值，当函数返回时后面代码不再执行</li></ul><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="一、全局作用域"><a href="#一、全局作用域" class="headerlink" title="一、全局作用域"></a>一、全局作用域</h2><ul><li>全局作用域定义的变量为全局变量，变量不声明直接赋值也可以直接转化为全局变量</li></ul><h2 id="二、局部作用域"><a href="#二、局部作用域" class="headerlink" title="二、局部作用域"></a>二、局部作用域</h2><ul><li>局部作用域定义的变量为局部作用域，局部变量，在代码块中声明的变量</li></ul><h2 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意"></a>三、注意</h2><ul><li>在ES5中没有块级作用域</li></ul><h1 id="JS代码执行过程"><a href="#JS代码执行过程" class="headerlink" title="JS代码执行过程"></a>JS代码执行过程</h1><ol><li>语法检查<ul><li>检查语法错误</li></ul></li><li>预解析<ul><li>提升变量和函数，函数提升优于变量，把带有var和function定义的变量提升到作用域前面</li></ul></li><li>代码执行<ul><li>代码按照顺序执行</li></ul></li></ol><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="一、概述-2"><a href="#一、概述-2" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>一组无序属性和方法的键值对集合</li></ul><h2 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h2><ul><li>获取属性<ul><li>对象.属性名或者对象[“属性名”]</li></ul></li><li>新增属性<ul><li>对象.属性名=值</li></ul></li><li>修改属性<ul><li>对象.属性名=值</li></ul></li></ul><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><ul><li>新增方法<ul><li>fn:function(){}</li></ul></li><li>调用方法<ul><li>object.fn()</li></ul></li></ul><h2 id="四、创建对象"><a href="#四、创建对象" class="headerlink" title="四、创建对象"></a>四、创建对象</h2><ol><li>字面量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    name: <span class="hljs-string">&quot;张三&quot;</span>,<br>    age: <span class="hljs-number">0</span>,<br>    run: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>new</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure><ol start="3"><li>构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Obj</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>属性方法</th><th>概述</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.random()</td><td>取[0,1)中随机浮点数</td></tr></tbody></table><ul><li>取任意[a,b]之间整数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">a, b</span>) </span>&#123;<span class="hljs-keyword">return</span> a + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * (b - a + <span class="hljs-number">1</span>));&#125;<br></code></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>创建日期对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><ul><li>创建指定日期对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-12-12 12:00:00&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>常用方法</li></ul><table><thead><tr><th align="left">方法</th><th>概述</th></tr></thead><tbody><tr><td align="left">getFullYear()</td><td>获取年</td></tr><tr><td align="left">getMonth()</td><td>获取月(0-11)</td></tr><tr><td align="left">getDate()</td><td>获取日</td></tr><tr><td align="left">getDay()</td><td>获取周(0-6)</td></tr><tr><td align="left">getHours()</td><td>获取时</td></tr><tr><td align="left">getMinutes()</td><td>获取分</td></tr><tr><td align="left">getSeconds()</td><td>获取秒</td></tr></tbody></table><ul><li>获取时间戳<ul><li>日期对象.valueOf()</li><li>日期对象.getTime()</li><li>+new Date()</li><li>Date.now()</li></ul></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td><strong><code>★forEach(fn)</code></strong></td><td>快速遍历数组</td><td><code>fn(item, index)</code></td><td>undefined</td><td>不会修改</td></tr><tr><td><strong><code>★filter(fn)</code></strong></td><td>从数组中筛选出所有符合条件的元素</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>some(fn)</code></strong></td><td>判断数组中是否有符合条件的某个元素</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>every(fn)</code></strong></td><td>判断数组中是否所有元素都符合条件</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>Array.from(obj[,fn])</code></strong></td><td>把其他类型的数据转成数组</td><td>其他类型数据</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★find(fn)</code></strong></td><td>查找数组中符合条件的第一个元素</td><td><code>fn(item, index)</code></td><td>元素值或undefined</td><td>不会修改</td></tr><tr><td><strong><code>findIndex(fn )</code></strong></td><td>查找数组中符合条件的第一个元素的索引</td><td><code>fn(item, index)</code></td><td>索引号或-1</td><td>不会修改</td></tr><tr><td><strong><code>includes(固定值)</code></strong></td><td>判断数组是否包含给定的值</td><td>固定值</td><td>布尔值</td><td>不会</td></tr><tr><td><strong><code>★map(fn)</code></strong></td><td>基于原数组去创建一个新数组</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>★trim()</code></strong></td><td>去除字符串两端的空格</td><td>无</td><td>去除空格后的字符</td></tr><tr><td><strong><code>startsWidth()</code></strong></td><td>判断字符串是否以某些字符开头</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>endsWidth()</code></strong></td><td>判断字符串是否以某些字符结尾</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>repeat(n)</code></strong></td><td>将某个字符串重复 n 次</td><td>重复的次数</td><td>新字符串</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好 博客</title>
    <link href="/2021/02/09/hello-world/"/>
    <url>/2021/02/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到博客!!! </p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
    
    
    <categories>
      
      <category>我的博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax基础知识</title>
    <link href="/2021/02/09/Ajax/"/>
    <url>/2021/02/09/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>全称：异步JS和XML</li><li>作用：客户端和服务器之间的通信</li><li>特点：异步</li></ul><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><ul><li>统一资源定位符，互联网资源位置，标识唯一资源</li><li>编码 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;字符&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>解码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&quot;code&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li>概述<ul><li>javascript对象表示法</li></ul></li><li>作用<ul><li> 一种轻量级数据交换格式，用于客户端和服务端之间进行数据传输</li></ul></li><li>序列化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.stringify(对象)<br></code></pre></td></tr></table></figure><ul><li>反序列化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.parse(json字符串)<br></code></pre></td></tr></table></figure><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><ul><li><p>概述</p><ul><li>浏览器内置对象，用于和服务器之间交互</li></ul></li><li><p>get</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.open(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.send();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.addEventListener(<span class="hljs-string">&quot;readystatechange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.readyState === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-built_in">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.responseText);<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure></li><li><p>post</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.open(<span class="hljs-string">&quot;post&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.send(参数);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.addEventListener(<span class="hljs-string">&quot;readystatechange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.readyState === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-built_in">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.responseText);<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><h1 id="XMLHttpRequest新特性"><a href="#XMLHttpRequest新特性" class="headerlink" title="XMLHttpRequest新特性"></a>XMLHttpRequest新特性</h1></li><li><p>请求超时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.timeout=超时时间<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.ontimeout=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//...&#125;; //超时事件</span><br></code></pre></td></tr></table></figure></li><li><p>FormData</p><ul><li><p>作用：管理表单数据</p></li><li><p>实例FormData对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fd=<span class="hljs-keyword">new</span> FormData()<br></code></pre></td></tr></table></figure></li><li><p>数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//获取数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.append(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//添加数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.forEach();  <span class="hljs-comment">//遍历数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//设置数据</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>上传文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> files = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;form&quot;</span>).files;  <span class="hljs-comment">//获取文件列表</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//实例化FormData，添加文件数据</span><br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData();<br>fd.append(<span class="hljs-string">&quot;name&quot;</span>,files[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Ajax请求</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&quot;post&quot;</span>,url);<br>xhr.send(fd);<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//...&#125;;</span><br></code></pre></td></tr></table></figure></li><li><p>显示文件上传进度</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.upload.onprogress=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//文件可计算</span><br>       <span class="hljs-keyword">if</span>(e.lengthComputable)&#123;<br>      <span class="hljs-comment">//文件已上传大小</span><br>     e.loaded<br>      <span class="hljs-comment">//文件总大小</span><br>      e.total<br>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li>JQuery文件上传</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>          url: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/upload/avatar&quot;</span>,<br>          method: <span class="hljs-string">&quot;post&quot;</span>,<br>          data: fd,<br>          beforeSend: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;#loading&quot;</span>).show();<br>          &#125;,<br>          <span class="hljs-comment">// 设置编码multipart/form-data</span><br>          contentType: <span class="hljs-literal">false</span>,<br>          <span class="hljs-comment">// 不需要处理数据</span><br>          processData: <span class="hljs-literal">false</span>,<br>          success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>            $(<span class="hljs-string">&quot;#loading&quot;</span>).prop(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;http://www.liulongbin.top:3006&quot;</span> + res.url);<br>          &#125;<br>        &#125;);<br><span class="hljs-comment">// 主要设置contentType:false和processData:false</span><br></code></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><ul><li>概述<ul><li>一个专门处理数据请求的插件库</li></ul></li><li>get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.get(<span class="hljs-string">&quot;url&quot;</span>, &#123;<br>   params: &#123;<br>     name: <span class="hljs-string">&quot;letian&quot;</span>,<br>     age: <span class="hljs-number">20</span>,<br>   &#125;<br> &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(result);<br> &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(error);<br> &#125;);<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.post(<span class="hljs-string">&quot;url&quot;</span>, &#123;<br>  name: <span class="hljs-string">&quot;letian&quot;</span>,<br>  age: <span class="hljs-number">20</span>,<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>综合</p><ul><li> get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios(&#123;<br>        url: <span class="hljs-string">&quot;url&quot;</span>,<br>        method: <span class="hljs-string">&quot;get&quot;</span>,<br>        params: &#123;<br>          id: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(result);<br>      &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(error);<br>      &#125;);<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios(&#123;<br>  url: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/addbook&quot;</span>,<br>  method: <span class="hljs-string">&quot;post&quot;</span>,<br>  data: <br>    name: <span class="hljs-string">&quot;value&quot;</span><br>  &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h1 id="数据请求方式"><a href="#数据请求方式" class="headerlink" title="数据请求方式"></a>数据请求方式</h1><ul><li>get 多用于数据请求</li><li>post 多用于数据提交</li><li>异同点<ul><li>1、get 数据存放于url中，post数据存放于请求体中，相对安全</li><li>2、get请求会缓存到浏览器中，post请求不会缓存到浏览器</li><li>3、get请求有长度限制，post请求数据量大，可以是二进制数据</li></ul></li></ul><h1 id="JQ中的Ajax方法"><a href="#JQ中的Ajax方法" class="headerlink" title="JQ中的Ajax方法"></a>JQ中的Ajax方法</h1><ul><li>get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.get(url,data,fn())<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.post(url,data,fn())<br></code></pre></td></tr></table></figure><ul><li>get和post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-attr">method</span>:<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-attr">data</span>:&#123;data&#125;,fn()&#125;)<br></code></pre></td></tr></table></figure><ul><li>参数含义<ul><li>url 数据接口，即url地址</li><li>data 提交的数据</li><li>fn 回调函数</li><li>method 请求方式</li></ul></li></ul><h1 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h1><ul><li>属性<ul><li>action 表单数据提交的位置，即一个url地址</li><li>target 何处打开，_self当前页打开，_blank新的标签页打开</li><li>method 提交的方式get和post</li><li>enctype编码方式<ul><li>application/x-www-form-urlencoded 表示在发送前编码所有的字符</li><li>multipart/form-data 不对字符进行编码, 在传输文件时必须使用这个值</li><li>text/plain 空格转成 + 号, 不对特殊字符进行编码 (少用)</li></ul></li></ul></li><li>同步提交<ul><li>问题：会刷新页面，导致之前的数据丢失</li><li>解决方案：采用Ajax请求数据，表单只负责采集数据</li></ul></li><li>Ajax提交数据<ul><li>使用JQ的submit方法，提交表单数据</li><li>e.preventDefault() 取消表单默认跳转事件</li><li>document.querySelect(“form“).reset() 重置表单，reset为jS原生方法，需要原生js调用</li><li>JQ.serialize() 获取表单的所有数据组成的字符串,表单必须要有name属性</li></ul></li></ul><h1 id="同源跨域"><a href="#同源跨域" class="headerlink" title="同源跨域"></a>同源跨域</h1><ul><li>同源：两个url协议、域名和端口一样的url</li><li>同源策略：浏览器的一种安全策略，限制一个网站与另一个非同源网站资源交互</li><li>跨域：一个网站访问另一个非同源的网站资源</li><li>跨域请求的方式<ul><li>JSONP 方案: 利用跨域标签的特性发送 GET 请求获取数据 (缺点: 只能支持 GET 请求)</li><li> CORS 方案: 服务端处理跨域的一种技术手段, 开发中最为常用</li><li>代理服务器方案: 前端在本地开发的常用方案, 后面会学习专门的插件</li><li>手动关闭浏览器的同源策略: 不推荐使用, 安全性很差</li></ul></li><li>jsonp：通过script标签跨域数据请求</li><li>JQ的jsonp</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>      url: <span class="hljs-string">&quot;url&quot;</span>,<br>      data: &#123;<br>        name: <span class="hljs-string">&quot;letian&quot;</span><br>      &#125;,<br>      dataType: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>      success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res);<br>      &#125;<br>    &#125;);<br><span class="hljs-comment">// 主要是dataType:&quot;jsonp&quot;</span><br></code></pre></td></tr></table></figure><h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><ul><li>节流<ul><li>概述：单位时间内连续触发的事件只执行一次</li><li>应用：鼠标不断点击事件</li></ul></li><li>防抖<ul><li>概述：事件触发后延迟执行，期间再次触发事件重新延迟执行，直到最后一次触发的执行</li><li>应用：输入框连续输入字符、浏览器窗口大小改变</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
