<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/26/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/"/>
    <url>/2021/02/26/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-第三方包"><a href="#Node-js-第三方包" class="headerlink" title="Node.js 第三方包"></a>Node.js 第三方包</h1><blockquote><p>常用的 <code>npm</code> 第三方包使用说明. 总结如下</p></blockquote><h3 id="1-cors-包"><a href="#1-cors-包" class="headerlink" title="1. cors 包"></a>1. <code>cors</code> 包</h3><ul><li><p>作用</p><p><code>cors</code>是一个 <code>node.js</code> 软件包，用于提供跨域资源请求的中间件</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i cors<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 全局注册 cors 中间件</span><br>app.use(cors())<br> <br>app.get(<span class="hljs-string">&#x27;/products/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.json(&#123;<span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;This is CORS-enabled for all origins!&#x27;</span>&#125;)<br>&#125;)<br> <br>app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;CORS-enabled web server listening on port 80&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p> <a href="https://www.npmjs.com/package/cors">cors</a></p></li></ul><h3 id="2-body-parser-包"><a href="#2-body-parser-包" class="headerlink" title="2. body-parser 包"></a>2. <code>body-parser</code> 包</h3><ul><li><p>作用</p><p><code>node.js</code> 的中间件,  专门用于解析发送 <code>post</code> 请求时请求体中的数据,  使用 <code>req.body</code> 属性即可获取解析后的对象</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i body-parser<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 解析 application/x-www-form-urlencoded 格式的请求体数据</span><br>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 解析 application/json 格式的请求体数据</span><br>app.use(bodyParser.json())<br> <br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-comment">// 响应解析后的请求体对象</span><br>  res.send(req.body)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/body-parser">body-parser</a></p></li></ul><h3 id="3-mysql-包"><a href="#3-mysql-包" class="headerlink" title="3. mysql 包"></a>3. <code>mysql</code> 包</h3><ul><li><p>作用</p><p><code>npm</code> 上的第三方模块包, 为 <code>Node.js</code> 项目提供了连接和操作数据库的驱动</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mysql<br></code></pre></td></tr></table></figure><ul><li><p>使用方法</p><ul><li>连接数据库-方法1(创建一个新连接)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br>  <br>  <span class="hljs-keyword">var</span> connection = mysql.createConnection(&#123;<br>    host     : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>    user     : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>    password : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>    database : <span class="hljs-string">&#x27;my_db&#x27;</span><br>  &#125;);<br>  <br>  <span class="hljs-comment">// 2. 使用 query方法执行 sql 语句</span><br>  connection.query(<span class="hljs-string">&#x27;SELECT 1&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>    <span class="hljs-comment">// connected!</span><br>  &#125;);<br></code></pre></td></tr></table></figure><ul><li>连接数据库-方法2 (创建一个连接池)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><span class="hljs-keyword">var</span> pool  = mysql.createPool(&#123;<br>  connectionLimit : <span class="hljs-number">10</span>,<br>  host            : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>  user            : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>  password        : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>  database        : <span class="hljs-string">&#x27;my_db&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 使用 query方法执行 sql 语句</span><br>pool.query(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>执行<code>SQL</code>语句的方法 :  <code>query(sql语句, [values], callback)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询数据: ? 是一个占位符, 会被中括号中对应的值替换</span><br>db.query(<span class="hljs-string">&#x27;SELECT * FROM books WHERE author = ?&#x27;</span>, [<span class="hljs-string">&#x27;David&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-comment">// error 是查询中出现的错误</span><br>  <span class="hljs-comment">// results 是查询得到的所有结果</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新数据: 多个 ? 占位符, 会按照出现的先后顺序依次被中括号中的值替换</span><br>db.query(<span class="hljs-string">&#x27;UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?&#x27;</span>, [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, userId], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 插入数据: 快速插入一条数据</span><br><span class="hljs-keyword">var</span> post  = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hello MySQL&#x27;</span>&#125;;<br>db.query(<span class="hljs-string">&#x27;INSERT INTO posts SET ?&#x27;</span>, post, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ok!</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取插入, 更新 和 删除语句执行后影响的行数</span><br>db.query(<span class="hljs-string">&#x27;DELETE FROM posts WHERE title = &quot;wrong&quot;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;deleted &#x27;</span> + results.affectedRows + <span class="hljs-string">&#x27; rows&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/mysql">mysql</a></p></li></ul><h3 id="4-bcryptjs-包"><a href="#4-bcryptjs-包" class="headerlink" title="4. bcryptjs 包"></a>4. <code>bcryptjs</code> 包</h3><ul><li><p>作用</p><p>密码不能以明文形式保存到数据库中，否则数据泄露密码就会被窃取,  密码一般加密存储.</p><p> <code>bcryptjs</code> 是一个第三方加密库，用来实现在 Node 环境下的密码加密</p></li><li><p>加盐(<strong>salt</strong>)</p><p>在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为 “加盐”.</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i bcryptjs<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcryptjs&#x27;</span>)<br><span class="hljs-comment">// .hashSync() 方法对明文密码 bacon 进行加盐加密, 盐值为 10 (数字越大,密码越不容易被破解)</span><br><span class="hljs-keyword">var</span> hash = bcrypt.hashSync(<span class="hljs-string">&#x27;bacon&#x27;</span>, <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// .compareSync(加密前的密码, 加密后的密码) 方法比较加密前后的密码是否匹配</span><br>bcrypt.compareSync(<span class="hljs-string">&quot;not_bacon&quot;</span>, hash) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a></p></li></ul><h3 id="5-jsonwebtoken-包"><a href="#5-jsonwebtoken-包" class="headerlink" title="5. jsonwebtoken 包"></a>5. <code>jsonwebtoken</code> 包</h3><ul><li><p>作用</p><p>常用于网站中用户的身份认证,  可以把用户信息加密后生成一个 <code>token</code> 令牌, 不推荐存放用户密码等数据 </p></li><li><p><code>JWT </code>原理</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">参考说明</a></p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i jsonwebtoken<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><br><span class="hljs-keyword">var</span> privateKey = <span class="hljs-string">&#x27;seeyou&#x27;</span>; <span class="hljs-comment">// 私钥</span><br><span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xm&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">123</span>&#125;, privateKey, &#123;<br>    algorithm: <span class="hljs-string">&#x27;HS256&#x27;</span>, <span class="hljs-comment">// 加密算法</span><br>    expiresIn: <span class="hljs-string">&#x27;1h&#x27;</span> <span class="hljs-comment">// 过期时间</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p></li></ul><h3 id="6-express-jwt-包"><a href="#6-express-jwt-包" class="headerlink" title="6. express-jwt 包"></a>6. <code>express-jwt</code> 包</h3><ul><li><p>功能</p><p>提供给 <code>express</code> 的一个中间件, 可以验证 <code>JWT</code> 令牌是否有效, 并解码出 <code>JWT</code> 中用户信息挂载到 <code>req.user</code> 上</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-jwt<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>);<br><br><span class="hljs-comment">// 全局注册 jwt 中间件</span><br><span class="hljs-comment">// secret 是生成 jwt 时的秘钥; alg 是生成 jwt 时的加密算法</span><br><span class="hljs-comment">// .unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口不需要进行 jwt 的身份认证</span><br>app.use(jwt(&#123; <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;seeyou&#x27;</span>, <span class="hljs-attr">algorithms</span>: [<span class="hljs-string">&#x27;HS256&#x27;</span>]&#125;).unless(&#123;<span class="hljs-attr">path</span>: [<span class="hljs-regexp">/^\/api\//</span>]&#125;));<br><br><span class="hljs-comment">// jwt 解码后的用户信息通过 req.user 来进行获取</span><br>app.get(<span class="hljs-string">&#x27;/protected&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    res.send(req.user) <span class="hljs-comment">// &#123; username: &#x27;xm&#x27;, id: 123&#125;</span><br>&#125;);<br><br><span class="hljs-comment">// 解码 token 不合法时会抛出一个错误, 统一在错误中间件中进行处理</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>    res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;invalid token...&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档 (**<code>npm</code> 文档没有更新, 参考最新的 <code>github</code> 文档 **)</p><p><a href="https://github.com/auth0/express-jwt">express-jwt</a>     </p></li></ul><h3 id="7-multer-包"><a href="#7-multer-包" class="headerlink" title="7. multer 包"></a>7. <code>multer</code> 包</h3><ul><li><p>作用</p><p><code>multer</code> 是 <code>node.js</code> 的中间件, 用来解析 <code>multipart/form-data</code> 格式提交的数据,  主要用于文件上传的场景;</p><p>文件一般不会直接存放在数据库, 影响查询效率,  更多的是把文件存储在本地,  再向数据库中存储本地文件的路径</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i multer<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><p>​    表单中 <strong>文本字段</strong> 解析处理后的数据被挂载到 <code>req.body</code> 属性上</p><p>​    表单中 <strong>文件字段</strong> 解析处理后的数据被挂载到 <code>req.file</code>属性上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> multer  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><br><span class="hljs-comment">// 创建 multer 的实例对象，通过 dest 属性指定上传文件的存放路径</span><br><span class="hljs-keyword">var</span> upload = multer(&#123; <span class="hljs-attr">dest</span>: path.join(__dirname, <span class="hljs-string">&#x27;../uploads&#x27;</span>) &#125;)<br><br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">//  upload.single(&#x27;cover_img&#x27;) 表示对 cover_img 这个文件字段单独处理</span><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, upload.single(<span class="hljs-string">&#x27;cover_img&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// req.file对象 存放了的文件处理后的信息, </span><br>  <span class="hljs-comment">// 其中有 fieldname 属性: 表单提交时的字段名, filename 属性: 文件上传到本地后的默认文件名</span><br>  <span class="hljs-comment">// req.body对象 存放了文本字段解析后的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/multer">multer</a></p></li></ul><h3 id="8-hapi-joi-包"><a href="#8-hapi-joi-包" class="headerlink" title="8. @hapi/joi 包"></a>8. <code>@hapi/joi</code> 包</h3><ul><li><p>作用</p><p>在实际开发中，前后端都需要对表单的数据进行合法性的验证，而且，后端做为数据合法性验证的最后 一个关口，在拦截非法数据方面，起到了至关重要的作用,  <code>joi</code> 是 推荐使用第三方数据验证模块</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @hapi/joi<br></code></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** </span><br><span class="hljs-comment">  * string() 值必须是字符串 </span><br><span class="hljs-comment">  * alphanum() 值只能是包含 a-zA-Z0-9 的字符串 </span><br><span class="hljs-comment">  * min(length) 最小长度 </span><br><span class="hljs-comment">  * max(length) 最大长度 </span><br><span class="hljs-comment">  * required() 值是必填项，不能为 undefined </span><br><span class="hljs-comment">  * pattern(正则表达式) 值必须符合正则表达式的规则 </span><br><span class="hljs-comment">  * email() 符合邮箱格式</span><br><span class="hljs-comment">  * integer() 值为整数</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-comment">// 用户名的验证规则 </span><br><span class="hljs-keyword">const</span> username = joi.string().alphanum().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">10</span>).required()<br><br><span class="hljs-comment">// 密码的验证规则 </span><br><span class="hljs-keyword">const</span> password = joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,12&#125;$/</span>).required()<br><br><span class="hljs-comment">// 邮箱验证规则</span><br><span class="hljs-keyword">const</span> email = joi.string().email().required()<br><br><span class="hljs-comment">// id 验证规则</span><br><span class="hljs-keyword">const</span> id = joi.number().integer().min(<span class="hljs-number">1</span>).required() <br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://joi.dev/api/">Joi</a></p></li></ul><h3 id="9-escook-express-joi-包"><a href="#9-escook-express-joi-包" class="headerlink" title="9. @escook/express-joi 包"></a>9. <code>@escook/express-joi</code> 包</h3><ul><li><p>作用</p><p><code>express</code> 项目中对请求参数应用 <code>joi</code> 验证规则的中间件</p></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @escook/express-joi<br></code></pre></td></tr></table></figure></li><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 导入 Joi 来定义验证规则</span><br><span class="hljs-keyword">const</span> Joi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@hapi/joi&#x27;</span>)<br><span class="hljs-comment">// 1. 导入 @escook/express-joi</span><br><span class="hljs-keyword">const</span> expressJoi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@escook/express-joi&#x27;</span>)<br> <br><span class="hljs-comment">// 解析 x-www-form-urlencoded 格式的表单数据</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 2. 定义验证规则</span><br><span class="hljs-comment">// 注意：如果客户端提交的某些参数项未在 schema 中定义，</span><br><span class="hljs-comment">// 此时，这些多余的参数项默认会被忽略掉</span><br><span class="hljs-keyword">const</span> userSchema = &#123;<br>  <span class="hljs-comment">// 2.1 校验 req.body 中的数据</span><br>  body: &#123;<br>    username: Joi.string().alphanum().min(<span class="hljs-number">3</span>).max(<span class="hljs-number">12</span>).required(),<br>    password: Joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,15&#125;$/</span>).required(),<br>    repassword: Joi.ref(<span class="hljs-string">&#x27;password&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// 2.2 校验 req.query 中的数据</span><br>  query: &#123;<br>    name: Joi.string().alphanum().min(<span class="hljs-number">3</span>).required(),<br>    age: Joi.number().integer().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">100</span>).required(),<br>  &#125;,<br>  <span class="hljs-comment">// 2.3 校验 req.params 中的数据</span><br>  params: &#123;<br>    id: Joi.number().integer().min(<span class="hljs-number">0</span>).required(),<br>  &#125;,<br>&#125;<br> <br><span class="hljs-comment">// 3. 在路由中通过 expressJoi(userSchema) 的方式</span><br><span class="hljs-comment">//    调用中间件进行参数验证</span><br>app.post(<span class="hljs-string">&#x27;/adduser/:id&#x27;</span>, expressJoi(userSchema), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> body = req.body<br>  res.send(body)<br>&#125;)<br> <br><span class="hljs-comment">// 4.1 错误级别中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// 4.1 Joi 参数校验失败</span><br>  <span class="hljs-keyword">if</span> (err <span class="hljs-keyword">instanceof</span> Joi.ValidationError) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123;<br>      status: <span class="hljs-number">1</span>,<br>      message: err.message,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 4.2 未知错误</span><br>  res.send(&#123;<br>    status: <span class="hljs-number">1</span>,<br>    message: err.message,<br>  &#125;)<br>&#125;)<br> <br><span class="hljs-comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span><br>app.listen(<span class="hljs-number">3001</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:3001&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官网文档</p><p><a href="https://www.npmjs.com/package/@escook/express-joi">@escook/express-joi</a></p></li></ul><h3 id="10-express-session-包"><a href="#10-express-session-包" class="headerlink" title="10. express-session 包"></a>10. <code>express-session</code> 包</h3><ul><li><p>作用</p><p>提供 <code>session</code> 身份认证方案的第三方包,  生成的 <code>session</code> 数据并不保存在客户端,  而是在服务端存储 (默认位置是内存里), 客户端分发的 <code>cookie</code> 仅仅是用来访问 <code>session</code> 数据的 <code>sessionID</code>.</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-session<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">// 创建一个 session 中间件, 并注册到全局</span><br>app.use(session(&#123;<br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-comment">// 通过 req.session 可以存储和获取 session 数据</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (req.session.isLogin) &#123;<br>    res.send(req.session.user)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;请重新登录!&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// TODO_04：清空 Session 信息</span><br>  <span class="hljs-comment">// 销毁当前用户存储的 session 数据</span><br>  req.session.destroy()<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/express-session">express-session</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/24/MySQL%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/MySQL%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>– 从 users 表中查询所有列的数据<br>– select * from users;</p><p>– 从 users 表中查询指定 username 和 status 列的数据<br>– select username,status from users;    </p><p>– 向 users 表中插入一条数据 username 是 tom, password 是 admin123<br>– insert into users(username, password) values(‘tom123’, ‘admin123’);<br>– select * from users;</p><p>– 修改 username 为 xm 的这条数据的密码,修改为 abcdef<br>– update users set password=’abcdef’ where username=’xm’;<br>– select * from users;</p><p>– 同时更新 password 和 status 值<br>– update users set password=’abcdef’, status=1 where username=’xm’;<br>– select * from users;</p><p>– 删除 id 为 4 的用户<br>– delete from users where id=4;<br>– select * from users;</p><p>– 查询表中 id 小于 7 的用户<br>– select * from users where id&lt;7</p><p>– 查询表中 id 在 5-7 的用户<br>– select * from users where id between 5 and 7</p><p>– 查询表中用户名包含 123 的用户<br>– select * from users where username like ‘%123%’</p><p>– 查询表中 status 值为1, 并且 id 大于 6 的用户<br>– select * from users where status = 1 and id &gt; 6 </p><p>– 查询表中 status 值为1, 并且 id 大于 6 的用户<br>– select * from users where status = 1 or id &gt; 6 </p><p>– 查询表中所有用户根据 status 升序来排列结果<br>– select * from users order by status</p><p>– 查询表中所有用户根据 id 降序来排列结果<br>– select * from users order by id desc</p><p>– 查询表中 id 值大于3的用户并根据 id 降序来排列结果(注意: where 子句在前, order by 子句在后)<br>– select * from users where id&gt;3 order by id desc</p><p>– 先根据 status 状态值进行降序排列, 再根据 password 来进行升序排列 (日期)<br>– select * from users order by status desc, password asc</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Node%20%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88%20%E5%8F%8A%20%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/Node%20%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88%20%E5%8F%8A%20%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<ol><li>下载一个指定的包:   npm  i  包的具体名称</li><li>查看一个指定的包:   npm  view  包的具体名称</li><li>下载指定版本的包:   npm  i  包的具体名称@版本号</li><li> 快速创建包管理配置文件:    npm  init  -y                                                        [注意: 在项目的根目录下执行,项目目录不能使用中文命名,不能包含空格]</li><li>卸载指定的包:   npm  uninstall  包名称</li><li>安装开发测试阶段用到的包:   npm  i  -D  包名称@版本号</li><li>更换国内的源:   npm  config  set  registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>检查源是否更换成功:  npm  config  get  registry</li><li>使用 nrm 切换源:  npm  i  -g  nrm<code>==&gt;</code>nrm  ls<code> ==&gt;</code>nrm  use  taobao          [依次执行]</li><li>安装全局包:   npm  i  -g  包名称</li><li>下载全局包:   npm  uninstall  -g  包名称</li><li>发布包到 npm 官网:   npm  publish                                                               [在包的发布目录下面执行命令]</li><li>删除已经发布的包:   npm  unpublish  包名称  –force</li><li>查看本机的 npm :    npm  -v</li></ol><p>模板加载机制:</p><p>核心模块的加载机制:</p><p>require() 总是会优先加载核心模块</p><p>比如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件</p><p>自定义模块的加载机制:</p><p>使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个路径标识,node 会默认成核心模块或 第三方模块</p><p>1.自定义文件模块: </p><p>如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或      .node 拓展名再加载;</p><p>2.自定义目录模块:</p><p>当传递一个目录标识符给 require () 方法时, 加载的顺序如下:</p><p>   \1. 在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口</p><p>   \2. 上述找不到, Node.js 将会试图加载目录下的 index.js 或 index.node 文件</p><p>第三方模块的加载机制:</p><p>如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，</p><p>  那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，</p><p>  则移动到再上一层父目录，直到文件系统的根目录。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
